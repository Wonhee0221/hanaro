/*
node가 장비제어도 가능해서 범용어 - 로봇도 제어하고, 임베디드장바 웹프로그램도가능
디비에도 접근가능

node로 로봇을 제어한다고 하면 필요한 연산자가 바로 비트연산자이다.
비트연산자 : &(and 연산), |(or연산), ~(not 연산)
논리연산자는 전체 수식을 true 또는 false로 파악하여 true&&false로 연산한다.
비트연산자는 주어진 값을 이진수로 바꾸어서 각각의 비트끼리 연산을 수행한다.

예)
a=7
b=4
a && b = > a가 0이 아니고 b가 0 이 아니면으로 판단한다. 즉 a에 7이 있고 b에 4가 있으니까 true && true 로해서 true로함
a & b 일 때       0000 0111 <-- 7임
                  0000 0100 <-- 4임
              ------------------------
                  0000 0100 : 결과 4임.
 4-3 => 4+(-3)으로 해석해서 연산한다.
-3 => 3의 2의 보수를 구한다. 0111 => 1000 ->1001


*/

//shift 연산자 << , >> -> 비트를 이동시킨다. 방향에 따라 왼쪽 또는 오른쪽으로 이동시킨다.

/*
 2 << 2 ==> 0000 0010
          0000 001000
        ---------------
              0000 1000
 2 ** 2 보다 실행 속도가 훨씬 빠르다.
*/

let a = 0b110010; // 바이트로 인식할 때는 0b를 앞에 써주면 인식함
console.log(a)

// 8진수 만들어보기
let b =0o777;
console.log(b)

//16진수 만들어보기
let d = 0xff;
console.log(d)

console.log(d ^ 0xff) // xor 연산자 - 배타적 or 연산자 서로 값이 다르면 1이다. 같을 때 0이다.
console.log(d ^ 0x00) // 0xff ^ 0xff ->0



