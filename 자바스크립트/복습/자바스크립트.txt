함수형 언어?
=> 함수도 변수다. 
변수에 함수의 주소를 저장할 수 있다. =>함수의 표현식 또는 람다(화살표함수)로 발전했다.
함수의 매개변수로 함수를 줄수도있고,  => 콜백함수
함수의 리턴(반환)값이 함수일수도 있다. =>클로저
함수내에서 함수를 만들어서 반환할 수 도 있고 => 클로저

2. LAZY 초기화
생성자에 의한 개체 초기화 = > LAZY초기화
객체 : let 변수명 = new 클래스명() => 이때 생성자가 호출된다.
생성자에서 초기화 - 메모리할당, 디비연결...을 하려고했는데 나중에 결정되는 것들이 있을수 있음
예전에는 생성자 냅두고 init같은 함수를 만들어서 처리를 했다.
안드로이드 gui 프로그램을 할때 사용했다.

html문서 상단에 헤더태그 사이에 자바스크립트 코드를 넣었었다.
=> 문제점 : 자바스크립트는 dom객체를 제어하려고 만든것
dom ? 우리가 만든 html문서의 태그들을 객체화 시켜서 DOM tree라는 걸 만든다.(div,table이런거)
접근 코드는 먼저 만들고 실제 객체는 나중에 만드는문제 => 그래서 window.onload를 사용한다.
html문서를 dom객체화 한 이후에 자바스크립트가 호출 되어야한다..

3. 엄격한 타입체크 - 모던스크립트 변수자체는 타입선언을 못한다.
타입스크립트 - > 타입선언을 해서 타입안정성을 높이려고 했다.
모던스크립트는  새로만든 언어가 아니다. 오랬동안 자바스크립트를 발전시킨거다.

동적 결합 : 동적으로 결정된다. 컴퓨터에 위험하다. 불안정성, 무슨사고가 터질지 모른다.
사고는 예측가능해야해서 좋지않다.위에 방법은. => 그래서 나온게 typeScript가 나왔다.
// 자바의 generic => 타입안정성을 보장하기 위해 나온것이다.
모던스크립트 만으로는 타입안정성이 떨어진다.

4. 왜 개발자는 모든 알고리즘 외우고 정렬이나 검색등 맨날하는 일을 또 해야하는가?
자주 사용하는 코드들을 미리 라이브러리로 만들어 놓자!!!
=> LinkedLsit, Stack, Queue, Tree, Map....등등이 만들어짐
1 ) 인터페이스 -java -전역함수 못만든다. 람다도 인터페이스 기반
2 ) iterator
3 ) lambda - 함수가 받아야한다.


Array => 객체
JavaScript 배열은 크기를 조정이 가능하고,
다양한 데이터 형식을 혼합하여 저장할 수 있따.
json, lambda(화살표함수), 비동기(콜백을 이용한 처리) =>Promise => async,awite
자바스크립트는 웬만하면 알아서 자동형전환을 한다. 그래서 문제가 많다.
자동형전환하기 싫으면 엄격한 체크를 사용하자, === , !==
